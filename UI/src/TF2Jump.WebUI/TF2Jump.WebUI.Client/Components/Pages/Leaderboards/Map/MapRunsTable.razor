@using TempusApi.Enums
@using Humanizer
@using TempusApi.Models
@using TempusApi.Models.Activity

@inject ITempusClient TempusClient
@inject NavigationManager NavigationManager

<div>
    <FluentDataGrid Items="@Runs.AsQueryable()"
                    ShowHover
                    OnRowClick="@((FluentDataGridRow<RecordInfoShort> context) => NavigationManager.NavigateTo($"/leaderboard/records/{context.Item?.Id}"))"
                    GridTemplateColumns="minmax(50px, auto) 1fr 1fr 1fr"
                    RowClass="@(x => x.Rank is 1 ? "wr-highlight" : "")">
        <TemplateColumn Title="Rank" Style="min-width: 50px; text-align: center" Class="no-shrink">
            @(context.Rank is 1 ? "WR" : context.Rank)
        </TemplateColumn>
        <TemplateColumn Title="Time" Class="no-shrink">
            @context.Duration.ToTimeSpan().ToFormattedDuration()

            <div class="wr-split">
                @if (context.Rank is not 1)
                {
                    <text>
                        + @((context.Duration.ToTimeSpan() - Runs.First().Duration.ToTimeSpan()).ToFormattedDuration())
                    </text>
                }
            </div>
        </TemplateColumn>
        <TemplateColumn Title="Name">
            @{
                _ = _steamProfiles.TryGetValue(SteamUtilities.ConvertToSteamId64(context.PlayerInfo.SteamId), out var steamProfile);
            }

            <a href="/leaderboard/players/@context.PlayerInfo.Id">
                <FluentStack Orientation="Orientation.Horizontal">
                    @if (steamProfile != null)
                    {
                        <FluentPersona Image="@steamProfile.Avatars.SmallUrl" ImageSize="24px"/>
                    }

                    @context.Name
                </FluentStack>
            </a>
        </TemplateColumn>
        <TemplateColumn Title="Date" Class="no-shrink">
            @context.Date.ToDateTimeOffset().Humanize()
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code
{
    [Parameter, EditorRequired]
    public required List<RecordInfoShort> Runs { get; set; }
    
    [Parameter] 
    public Class Class { get; set; }
    
    private Dictionary<long, SteamProfile> _steamProfiles = new();

    protected override async Task OnParametersSetAsync()
    {
        var tempusPlayerIds = Runs.Select(x => x.PlayerInfo)
            .Where(x => x.SteamId is not null)
            .DistinctBy(x => x.SteamId)
            .Select(x => SteamUtilities.ConvertToSteamId64(x.SteamId))
            .ToArray();
        
        _steamProfiles = await TempusClient.GetSteamProfilesAsync(tempusPlayerIds);
    }

}
