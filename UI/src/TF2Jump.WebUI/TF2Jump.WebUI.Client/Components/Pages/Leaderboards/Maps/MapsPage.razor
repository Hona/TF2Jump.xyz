@page "/leaderboard/maps"
@using System.ComponentModel
@using System.Linq.Expressions
@using TempusApi.Enums
@using TempusApi.Models.DetailedMapList
@using TF2Jump.WebUI.Client.Utilities

@inject ITempusClient TempusClient
@inject HttpClient HttpClient
@inject PersistentComponentState ApplicationState

@implements IDisposable

<div>
    @if (_loading)
    {
        <FluentProgressRing/>
    }
    else
    {
        <PageTitle>Maps | TF2 Jump</PageTitle>
        <HeadContent>
            <meta name="description" content="The complete list of @_maps.Count maps currently on the Tempus Jump Network. Filter, sort and navigate to maps here."/>
        </HeadContent>
        
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
            <FluentCard Style="width: 100%; height: fit-content">
                <h3>Maps</h3>

                <FluentStack Wrap VerticalAlignment="VerticalAlignment.Center">
                    <ClassSelector @bind-SelectedClass="_selectedClass"/>
                    <FluentButton IconStart="@(_filterVisible ? new Icons.Filled.Size16.FilterDismiss() : new Icons.Filled.Size16.Filter())" OnClick="ToggleFilter"/>
                    @if (_filterVisible)
                    {
                        <FluentStack Wrap VerticalAlignment="VerticalAlignment.Center">
                            <FluentTextField Placeholder="Search maps" @bind-Value="_searchText" Immediate ImmediateDelay="250"
                                             Size="40"/>
                            <FluentCheckbox Label="Also search authors" @bind-Value="_searchAuthors"/>

                            <FluentStack Wrap VerticalAlignment="VerticalAlignment.Center">
                                @for (var i = MinTier; i <= MaxTier; i++)
                                {
                                    var localI = i;
                                    <FluentCheckbox Label="@("Tier " + localI)" @bind-Value="_tierFilters[localI]"/>
                                }
                            </FluentStack>

                            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                                @*Sort by (name or tier)*@
                                
                                <FluentSelect Label="Sort by" 
                                              @bind-SelectedOption="_selectedSortOption"
                                              TOption="MapSortOption"
                                              OptionText="x => x.ToString()"
                                              Items="_sortOptions" 
                                              Position="SelectPosition.Above">
                                    <FluentIcon Slot="end" Value="@(new Icons.Filled.Size16.ArrowSort())"/>
                                </FluentSelect>
                                
                                <FluentButton OnClick="ToggleSortDirection">
                                    <FluentIcon Value="@GetSortDirectionIcon()" />
                                </FluentButton>
                            </FluentStack>

                        </FluentStack>
                    }
                </FluentStack>

            </FluentCard>

            <FluentDivider Orientation="Orientation.Horizontal" Role="@DividerRole.Presentation"/>

            <FluentGrid Class="map-card-grid">
                @foreach (var map in GetMapsToDisplay())
                {
                    <FluentGridItem xs="12" sm="6" md="4" lg="3">
                        <MapCard Map="map" SelectedClass="_selectedClass" @key="map"/>
                    </FluentGridItem>
                }
            </FluentGrid>
            
            @{
                var missingIntendedData = _maps!
                    .Where(map => !_intendedClasses!.ContainsKey(map.Name))
                    .ToList();
            }
            
            @if (missingIntendedData.Any())
            {
                <FluentAccordion Style="width: 100%">
                    <FluentAccordionItem Heading="Maps missing intended class data" Expanded="false">
                        <FluentGrid Class="map-card-grid">
                            @foreach (var map in missingIntendedData)
                            {
                                <FluentGridItem xs="12" sm="6" md="4" lg="3">
                                    <MapCard Map="map" SelectedClass="_selectedClass" @key="map"/>
                                </FluentGridItem>
                            }
                        </FluentGrid>
                    </FluentAccordionItem>
                </FluentAccordion>
            }
        </FluentStack>
    }
</div>

@code
{
    private bool _loading;
    private List<DetailedMapOverviewModel>? _maps;
    private Dictionary<string, IntendedClasses>? _intendedClasses;
    private Class _selectedClass = Class.Soldier;
    private bool _filterVisible;
    private string _searchText = "";
    private bool _searchAuthors = true;

    private const int MinTier = 0; // Impossible
    private const int MaxTier = 6; // Insane
    
    private readonly MapSortOption[] _sortOptions = Enum.GetValues<MapSortOption>();
    private MapSortOption _selectedSortOption = MapSortOption.Name;
    private ListSortDirection _sortDirection = ListSortDirection.Ascending;

    private Dictionary<int, bool> _tierFilters = null!;

    private Icon GetSortDirectionIcon()
    {
        return _sortDirection switch
        {
            ListSortDirection.Ascending => new Icons.Filled.Size16.TextSortAscending(),
            ListSortDirection.Descending => new Icons.Filled.Size16.TextSortDescending(),
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    private void ToggleSortDirection()
    {
        _sortDirection = _sortDirection switch
        {
            ListSortDirection.Ascending => ListSortDirection.Descending,
            ListSortDirection.Descending => ListSortDirection.Ascending,
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    private IEnumerable<DetailedMapOverviewModel> GetMapsToDisplay()
    {
        if (_intendedClasses is null)
        {
            throw new InvalidOperationException("Intended classes not loaded");
        }
        
        var output = _maps ?? [];
        
        var query = output.AsQueryable();

        var selectedIntendedClass = _selectedClass switch
        {
            Class.Soldier => IntendedClasses.Soldier,
            Class.Demoman => IntendedClasses.Demoman,
            _ => throw new ArgumentOutOfRangeException()
        };
        
        query = query
            .Where(map => _intendedClasses.ContainsKey(map.Name) && _intendedClasses[map.Name].HasFlag(selectedIntendedClass));
        
        if (!_filterVisible)
        {
            return query;
        }
        
        if (string.IsNullOrWhiteSpace(_searchText))
        {
            query = query.Where(map => map.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase)
                                       || _searchAuthors && map.Authors.Any(author => author.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase)));
        }

        query = query.Where(map => _tierFilters[GetTier(map)]);

        query = _sortDirection switch
        {
            ListSortDirection.Ascending => query.OrderBy(KeySelector()),
            ListSortDirection.Descending => query.OrderByDescending(KeySelector()),
            _ => throw new ArgumentOutOfRangeException()
        };

        return query;
    }
    
    private enum MapSortOption
    {
        Name,
        Tier
    }

    private Expression<Func<DetailedMapOverviewModel, string>> KeySelector()
    {
        return map => _selectedSortOption == MapSortOption.Name ? map.Name : GetTier(map).ToString();
    }

    private int GetTier(DetailedMapOverviewModel map)
    {
        return _selectedClass switch
        {
            Class.Soldier => map.TierInfo.Soldier,
            Class.Demoman => map.TierInfo.Demoman,
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    private PersistingComponentStateSubscription _persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = 
            ApplicationState.RegisterOnPersisting(PersistData);
        
        try
        {
            _loading = true;

            _tierFilters = new Dictionary<int, bool>();
            for (var i = MinTier; i <= MaxTier; i++)
            {
                _tierFilters[i] = true;
            }
            
            if (!ApplicationState.TryTakeFromJson<List<DetailedMapOverviewModel>?>(
                nameof(_maps), out var restored))
            {
                _maps = await TempusClient.GetDetailedMapListAsync();
            }
            else
            {
                _maps = restored!;
            }

            if (!ApplicationState.TryTakeFromJson<Dictionary<string, IntendedClasses>?>(
                nameof(_intendedClasses), out var restoredIntendedClasses))
            {
                _intendedClasses = await HttpClient.GetIntendedClassMapListAsync();
            }
            else
            {
                _intendedClasses = restoredIntendedClasses!;
            }
        }
        finally
        {
            _loading = false;
        }
    }
    
    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(_maps), _maps);
        ApplicationState.PersistAsJson(nameof(_intendedClasses), _intendedClasses);

        return Task.CompletedTask;
    }

    private void ToggleFilter()
    {
        _filterVisible = !_filterVisible;

        _searchText = "";
    }
    
    void IDisposable.Dispose()
    {
        _persistingSubscription.Dispose();
    }
}