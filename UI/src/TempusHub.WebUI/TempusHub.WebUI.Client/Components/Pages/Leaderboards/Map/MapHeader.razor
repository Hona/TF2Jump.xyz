@using TempusApi.Models.Responses
@using Humanizer
@using Humanizer.Localisation
@using TempusApi.Enums

@rendermode InteractiveAuto

<FluentCard Width="100%" Height="fit-content">
    <FluentStack Orientation="Orientation.Horizontal">
            
        <FluentStack Orientation="Orientation.Vertical" Style="margin-right: 1rem" Width="fit-content">
            <h3>
                @Map.MapInfo.Name
            </h3>
                
            <div>
                <FluentStack HorizontalGap="2" Wrap>
                    <span style="padding-right: 0.125rem">Authored by</span> 

                    @foreach (var author in Map.Authors)
                    {
                        <a href="/leaderboard/players/@author.PlayerInfo.Id">
                            @author.Name
                        </a>
                    }
                </FluentStack>
                
                @((DateTimeOffset.UtcNow - Map.MapInfo.DateAdded.ToDateTimeOffset()).Humanize(maxUnit: TimeUnit.Year)) old
            </div>
        </FluentStack>
        
        <ClassSelector SelectedClass="Class" SelectedClassChanged="ClassChanged"/>
            
        <FluentSpacer />
        
        <FluentStack Orientation="Orientation.Horizontal" Width="fit-content">
            <Statistic Value="??" 
                       Label="Total map completions" />
            <Statistic Value="??" 
                       Label="Unique map WRs" />
            <Statistic Value="@GetMapWrHeldDuration()" 
                       Label="Map WR held for" />
        </FluentStack>
    </FluentStack>
</FluentCard>

@code
{
    [Parameter]
    public FullMapOverview2 Map { get; set; }
    
    [Parameter] public Class Class { get; set; }
    [Parameter] public EventCallback<Class> ClassChanged { get; set; }

    private string GetMapWrHeldDuration()
    {
        var timestamp = Class switch
        {
            Class.Soldier => Map.SoldierRuns.FirstOrDefault()?.Date,
            Class.Demoman => Map.DemomanRuns.FirstOrDefault()?.Date,
            _ => throw new ArgumentOutOfRangeException()
        };
        
        if (timestamp == null)
        {
            return "N/A";
        }

        return timestamp.Value.ToDateTimeOffset().Humanize().Replace(" ago", "");
    }
}
