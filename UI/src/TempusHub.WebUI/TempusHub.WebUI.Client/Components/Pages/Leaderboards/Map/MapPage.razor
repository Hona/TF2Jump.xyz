@page "/leaderboard/maps/{MapName}"

@using TempusApi.Models.Responses
@using TempusApi.Enums
@using TempusHub.WebUI.Components.Pages.Leaderboards.Map

@inject ITempusClient TempusClient
@inject PersistentComponentState ApplicationState

@implements IDisposable

@rendermode InteractiveWebAssembly

<div>
    @if (_loading)
    {
        <FluentProgressRing/>
    }
    else
    {
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="6">
            <MapHeader Map="_map" @bind-Class="_selectedClass"/>

            <FluentDivider Orientation="Orientation.Horizontal" Role="@DividerRole.Presentation"/>

            <FluentStack Orientation="Orientation.Horizontal">
                <MapZoneSelector Map="_map" @bind-SelectedZone="_selectedZone" />
                
                <FluentCard Style="padding: 0">
                    <MapRunsTable Runs="@(_selectedClass is Class.Soldier ? _map.SoldierRuns : _map.DemomanRuns)" Class="_selectedClass"/>
                </FluentCard>
                
                <FluentCard Style="padding: 0">
                    <MapWorldRecordHistory />
                </FluentCard>
            </FluentStack>
        </FluentStack>
    }
</div>

@code
{
    [Parameter] public required string MapName { get; set; }
    
    private bool _loading;

    private FullMapOverview2? _map;

    private Class _selectedClass = Class.Soldier;
    private SelectedZone _selectedZone = new(ZoneType.Map, 1);
    
    private PersistingComponentStateSubscription persistingSubscription;
    protected override void OnInitialized()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(Persist);
    }
    
    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(_map), _map);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _map = null;
        _loading = true;

        try
        {
            _map = !ApplicationState.TryTakeFromJson<FullMapOverview2>(nameof(_map), out var restoredMap) 
                ? await TempusClient.GetFullMapOverview2Async(MapName) 
                : restoredMap!;
        }
        finally
        {
            _loading = false;
        }
    }
}